{"version":3,"sources":["components/Navbar.js","components/RoboGameMain.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","width","height","src","concat","Identicon","toString","Component","RoboGameMain","_this","role","style","maxWidth","onSubmit","event","preventDefault","name","robotName","value","createRobot","type","ref","input","placeholder","required","robots","map","robot","key","owner","class","alt","window","web3","utils","fromWei","level","robotID","onClick","toWei","levelRobot","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","roboGame","robotCount","loading","bind","assertThisInitialized","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","net","getId","networkId","networkData","RoboGame","networks","Contract","abi","address","methods","i","toConsumableArray","sort","b","_this2","send","from","once","receipt","_this3","components_Navbar","components_RoboGameMain","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb703471.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://shyan2.github.io/BlockGame/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Robotopia\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            {this.props.account ? (\n              <img //check video for explanation for this\n                className=\"ml-2\"\n                width=\"30\"\n                height=\"30\"\n                src={`data:image/png;base64, ${new Identicon(\n                  this.props.account,\n                  30\n                ).toString()}`}\n              />\n            ) : (\n              <span></span>\n            )}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Identicon from \"identicon.js\";\n\nclass RoboGameMain extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main\n            role=\"main\"\n            className=\"col-lg-12 ml-auto mr-auto\"\n            style={{ maxWidth: \"500px\" }}\n          >\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  const name = this.robotName.value; //!!\n                  this.props.createRobot(name);\n                }}\n              >\n                <div className=\"form-group mr-sm-2\">\n                  <input\n                    id=\"robotName\"\n                    type=\"text\"\n                    ref={(input) => {\n                      this.robotName = input;\n                    }} //!!\n                    className=\"form-control\"\n                    placeholder=\"Enter new robot's name!\"\n                    required\n                  />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                  Create robot\n                </button>\n              </form>\n              <p>&nbsp;</p>\n              {this.props.robots.map((robot, key) => {\n                //key is index\n                return (\n                  <div className=\"card mb-4\" key={key}>\n                    <div className=\"card-header\">\n                      <img //check video for explanation for this\n                        className=\"mr-2\"\n                        width=\"30\"\n                        height=\"30\"\n                        src={`data:image/png;base64, ${new Identicon(\n                          robot.owner,\n                          30\n                        ).toString()}`}\n                      />\n                      <small className=\"text-muted\">{robot.owner}</small>\n                    </div>\n                    <ul id=\"robotList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <div class=\"center-image\">\n                          <h3>{robot.name}</h3>\n                          <img\n                            alt=\"robots\"\n                            src={`https://robohash.org/ ${robot.name} &300x300`}\n                          />\n                        </div>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          LEVEL:{\" \"}\n                          {window.web3.utils.fromWei(\n                            robot.level.toString(),\n                            \"Ether\"\n                          )}{\" \"}\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={robot.robotID}\n                          onClick={(event) => {\n                            //Call the tip function. Need post ID and Tip amount\n                            //event.target.name (post ID)\n                            let level = window.web3.utils.toWei(\"0.1\", \"Ether\");\n                            this.props.levelRobot(event.target.name, level);\n                          }}\n                        >\n                          LEVEL + 0.1 (ETH)\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                );\n              })}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RoboGameMain;\n","import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport RoboGame from \"../abis/RoboGame.json\";\nimport Navbar from \"./Navbar\";\n//import Main from \"./Main\";\nimport RoboGameMain from \"./RoboGameMain\";\n\nclass App extends Component {\n  async componentWillMount() {\n    //wait for it to happen before doing anything else\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    //load account\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    this.setState({ account: accounts[0] }); //first is the one connected with metamask (an array)\n    //Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = RoboGame.networks[networkId];\n    if (networkData) {\n      //console.log(networkId);\n      const roboGame = web3.eth.Contract(RoboGame.abi, networkData.address);\n      this.setState({ roboGame }); //this.setState({ roboGame: roboGame });\n      //call only reads data (no gas), send requires gas\n      const robotCount = await roboGame.methods.robotCount().call();\n      this.setState({ robotCount });\n      //console.log(robotCount);\n      //Load posts\n      for (var i = 1; i <= robotCount; i++) {\n        const robot = await roboGame.methods.robots(i).call();\n        this.setState({\n          robots: [...this.state.robots, robot], //adds post to the end of the posts array, new in es6 and react\n        });\n      }\n      //console.log({ posts: this.state.robots });\n\n      //sort robots, show highest levelled robots first\n      this.setState({\n        robots: this.state.robots.sort((a, b) => b.level - a.level),\n      });\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"RoboGame contract not deployed to detected network.\");\n    }\n  }\n\n  createRobot(name) {\n    this.setState({ loading: true });\n    this.state.roboGame.methods\n      .createRobot(name)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({ loading: false });\n      });\n  }\n\n  levelRobot(id, level) {\n    this.setState({ loading: true });\n    this.state.roboGame.methods\n      .levelRobot(id)\n      .send({ from: this.state.account, value: level })\n      .once(\"receipt\", (receipt) => {\n        this.setState({ loading: false });\n      });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      roboGame: null,\n      robotCount: 0,\n      robots: [],\n      loading: true,\n    };\n\n    this.createRobot = this.createRobot.bind(this);\n    this.levelRobot = this.levelRobot.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p>Loading...</p>\n          </div>\n        ) : (\n          <RoboGameMain\n            robots={this.state.robots}\n            createRobot={this.createRobot}\n            levelRobot={this.levelRobot}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}