{"ast":null,"code":"import _toConsumableArray from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sc/Shyan2.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sc/Shyan2.github.io/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport RoboGame from \"../abis/RoboGame.json\";\nimport Navbar from \"./Navbar\"; //import Main from \"./Main\";\n\nimport RoboGameMain from \"./RoboGameMain\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, roboGame, robotCount, i, robot;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); //first is the one connected with metamask (an array)\n                //Network ID\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = RoboGame.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                //console.log(networkId);\n                roboGame = web3.eth.Contract(RoboGame.abi, networkData.address);\n                this.setState({\n                  roboGame: roboGame\n                }); //this.setState({ roboGame: roboGame });\n                //call only reads data (no gas), send requires gas\n\n                _context3.next = 15;\n                return roboGame.methods.robotCount().call();\n\n              case 15:\n                robotCount = _context3.sent;\n                this.setState({\n                  robotCount: robotCount\n                }); //console.log(robotCount);\n                //Load posts\n\n                i = 1;\n\n              case 18:\n                if (!(i <= robotCount)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 21;\n                return roboGame.methods.robots(i).call();\n\n              case 21:\n                robot = _context3.sent;\n                this.setState({\n                  robots: [].concat(_toConsumableArray(this.state.robots), [robot]) //adds post to the end of the posts array, new in es6 and react\n\n                });\n\n              case 23:\n                i++;\n                _context3.next = 18;\n                break;\n\n              case 26:\n                //console.log({ posts: this.state.robots });\n                //sort robots, show highest levelled robots first\n                this.setState({\n                  robots: this.state.robots.sort(function (a, b) {\n                    return b.level - a.level;\n                  })\n                });\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert(\"RoboGame contract not deployed to detected network.\");\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"createRobot\",\n    value: function createRobot(name) {\n      var _this2 = this;\n\n      this.setState({\n        loading: true\n      });\n      this.state.roboGame.methods.createRobot(name).send({\n        from: this.state.account\n      }).once(\"receipt\", function (receipt) {\n        _this2.setState({\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"levelRobot\",\n    value: function levelRobot(id, level) {\n      var _this3 = this;\n\n      this.setState({\n        loading: true\n      });\n      this.state.roboGame.methods.levelRobot(id).send({\n        from: this.state.account,\n        value: level\n      }).once(\"receipt\", function (receipt) {\n        _this3.setState({\n          loading: false\n        });\n      });\n    }\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"\",\n      roboGame: null,\n      robotCount: 0,\n      robots: [],\n      loading: true\n    };\n    _this.createRobot = _this.createRobot.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.levelRobot = _this.levelRobot.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(RoboGameMain, {\n        posts: this.state.robots,\n        createPost: this.createRobot,\n        tipPost: this.levelRobot,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/sc/Shyan2.github.io/src/components/App.js"],"names":["React","Component","Web3","RoboGame","Navbar","RoboGameMain","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkData","networks","roboGame","Contract","abi","address","methods","robotCount","call","i","robots","robot","state","sort","a","b","level","loading","name","createRobot","send","from","once","receipt","id","levelRobot","value","props","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\nimport RoboGame from \"../abis/RoboGame.json\";\nimport Navbar from \"./Navbar\";\n//import Main from \"./Main\";\nimport RoboGameMain from \"./RoboGameMain\";\n\nclass App extends Component {\n  async componentWillMount() {\n    //wait for it to happen before doing anything else\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    //load account\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    this.setState({ account: accounts[0] }); //first is the one connected with metamask (an array)\n    //Network ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = RoboGame.networks[networkId];\n    if (networkData) {\n      //console.log(networkId);\n      const roboGame = web3.eth.Contract(RoboGame.abi, networkData.address);\n      this.setState({ roboGame }); //this.setState({ roboGame: roboGame });\n      //call only reads data (no gas), send requires gas\n      const robotCount = await roboGame.methods.robotCount().call();\n      this.setState({ robotCount });\n      //console.log(robotCount);\n      //Load posts\n      for (var i = 1; i <= robotCount; i++) {\n        const robot = await roboGame.methods.robots(i).call();\n        this.setState({\n          robots: [...this.state.robots, robot], //adds post to the end of the posts array, new in es6 and react\n        });\n      }\n      //console.log({ posts: this.state.robots });\n\n      //sort robots, show highest levelled robots first\n      this.setState({\n        robots: this.state.robots.sort((a, b) => b.level - a.level),\n      });\n      this.setState({ loading: false });\n    } else {\n      window.alert(\"RoboGame contract not deployed to detected network.\");\n    }\n  }\n\n  createRobot(name) {\n    this.setState({ loading: true });\n    this.state.roboGame.methods\n      .createRobot(name)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({ loading: false });\n      });\n  }\n\n  levelRobot(id, level) {\n    this.setState({ loading: true });\n    this.state.roboGame.methods\n      .levelRobot(id)\n      .send({ from: this.state.account, value: level })\n      .once(\"receipt\", (receipt) => {\n        this.setState({ loading: false });\n      });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      roboGame: null,\n      robotCount: 0,\n      robots: [],\n      loading: true,\n    };\n\n    this.createRobot = this.createRobot.bind(this);\n    this.levelRobot = this.levelRobot.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        {this.state.loading ? (\n          <div id=\"loader\" className=\"text-center mt-5\">\n            <p>Loading...</p>\n          </div>\n        ) : (\n          <RoboGameMain\n            posts={this.state.robots}\n            createPost={this.createRobot}\n            tipPost={this.levelRobot}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}